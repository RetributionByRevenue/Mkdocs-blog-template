{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"about/","text":"About Hi \ud83d\udc4b My name is Mark Ruff. I\u2019m a DevOps Engineer, with a passion for architecting and implementing solutions tailored towards business problems and inefficiencies. Originally from Toronto (\ud83c\udf41), I am traveling around the world to find self-actualization. Check-out my profile page for more cross linking: https://ruffolo.io My Blogging Philosophy Community Engagement : Finding people with similar interests online is easy nowadays. While community engagement can be challenging, it can also be enriching to share projects, ideas and thoughts. Learning : Learning is bilateral. Not only the reader will learn something from the blog post, also the author has to achieve profound knowledge of the written material. Sharing is Caring : So many great articles, blogs, docs and books out there that I read and absorbed. Thanks to everyone who is sharing their knowledge. This blog is about giving back my learnings. Efficiency : Keep everything compact and concise Enjoy reading!","title":"About"},{"location":"about/#about","text":"Hi \ud83d\udc4b My name is Mark Ruff. I\u2019m a DevOps Engineer, with a passion for architecting and implementing solutions tailored towards business problems and inefficiencies. Originally from Toronto (\ud83c\udf41), I am traveling around the world to find self-actualization. Check-out my profile page for more cross linking: https://ruffolo.io","title":"About"},{"location":"about/#my-blogging-philosophy","text":"Community Engagement : Finding people with similar interests online is easy nowadays. While community engagement can be challenging, it can also be enriching to share projects, ideas and thoughts. Learning : Learning is bilateral. Not only the reader will learn something from the blog post, also the author has to achieve profound knowledge of the written material. Sharing is Caring : So many great articles, blogs, docs and books out there that I read and absorbed. Thanks to everyone who is sharing their knowledge. This blog is about giving back my learnings. Efficiency : Keep everything compact and concise Enjoy reading!","title":"My Blogging Philosophy"},{"location":"tags/","text":"Tags This page lists all available tags and the given blog posts. 3d-printing How to easily generate and 3D-print topological Maps BackBlaze B2 Auto sync zeit epub to your tolino Python Auto sync zeit epub to your tolino Windows Server 2008 Auto sync zeit epub to your tolino blender How to easily generate and 3D-print topological Maps dns How to Use a Custom Namecheap Domain with GitHub Pages? gis How to easily generate and 3D-print topological Maps github pages How to Use a Custom Namecheap Domain with GitHub Pages? guide How to easily generate and 3D-print topological Maps How to Use a Custom Namecheap Domain with GitHub Pages? mapa How to easily generate and 3D-print topological Maps namecheap How to Use a Custom Namecheap Domain with GitHub Pages? slicing How to easily generate and 3D-print topological Maps","title":"Tags"},{"location":"tags/#tags","text":"This page lists all available tags and the given blog posts.","title":"Tags"},{"location":"tags/#3d-printing","text":"How to easily generate and 3D-print topological Maps","title":"3d-printing"},{"location":"tags/#backblaze-b2","text":"Auto sync zeit epub to your tolino","title":"BackBlaze B2"},{"location":"tags/#python","text":"Auto sync zeit epub to your tolino","title":"Python"},{"location":"tags/#windows-server-2008","text":"Auto sync zeit epub to your tolino","title":"Windows Server 2008"},{"location":"tags/#blender","text":"How to easily generate and 3D-print topological Maps","title":"blender"},{"location":"tags/#dns","text":"How to Use a Custom Namecheap Domain with GitHub Pages?","title":"dns"},{"location":"tags/#gis","text":"How to easily generate and 3D-print topological Maps","title":"gis"},{"location":"tags/#github-pages","text":"How to Use a Custom Namecheap Domain with GitHub Pages?","title":"github pages"},{"location":"tags/#guide","text":"How to easily generate and 3D-print topological Maps How to Use a Custom Namecheap Domain with GitHub Pages?","title":"guide"},{"location":"tags/#mapa","text":"How to easily generate and 3D-print topological Maps","title":"mapa"},{"location":"tags/#namecheap","text":"How to Use a Custom Namecheap Domain with GitHub Pages?","title":"namecheap"},{"location":"tags/#slicing","text":"How to easily generate and 3D-print topological Maps","title":"slicing"},{"location":"posts/3d-print-topological-maps/","tags":["3d-printing","guide","gis","blender","slicing","mapa"],"text":"How to easily generate and 3D-print topological Maps This guide will provide an overview of how to generate a 3D model of any place in the world for subsequent 3d-printing. It will show how to generate and download the STL file, but also how to customize and prepare it for printing. 3d-printed Mount Fuji in Japan Tldr Head over to the mapa streamlit app and generate a STL file which you can use for 3d-printing. If you are interested in more customizations, keep on reading. There are a bunch of tools out there 1 which allow for generating 3D models based on satellite elevation data (mostly referred to as DEM ). However, I found that all existing tools did either not have high resolution data or were not as flexible as I hoped them to be, which is why I built my own tool. Hence, this guide will demonstrate the usage of mapa . Generating STL Files using the mapa Streamlit App mapa is a tool for converting GeoTIFF data into a tiles-based representation. The library is based on NumPy and Numba and provides a CLI API, a Python API, a Jupyter Notebook interface and the streamlit app which is built on top of mapa via the mapa-streamlit repository. In this guide we will focus on the usage of the mapa-streamlit web app, as it is the most convenient way. However, if you are curios I'd recommend to also check out the other options, as they provide even more flexibility. Screenshot of the mapa streamlit app Follow the below steps to generate a STL file of any selection on the map. Go to the mapa streamlit web app . Zoom in to your area of interest. Click the the black square on the left side of the map. Draw a rectangle. Hit the Create STL button. The app will now download the required data and compute the STL file in the background. Once finished, you can click the Download STL button. Unpack the downloaded zip file and inspect the computed STL file with your favorite STL file viewer. This is what an example could look like: Example of downloaded STL file Customizations This section will outline how to: add text to the bottom of the model add slots for magnets into the model We will use blender to customize the 3D model. Blender is a very powerful and popular open-source 3D graphics software. Caution I strongly recommend using a version of blender >= 3.0.0 to avoid any issues when working with text. You can download blender here . Once you have blender installed, open it up and import your downloaded STL file via: File \u2192 Import \u2192 Stl. Adding Text Adding some text to your model will allow you to persist any kind of information into the model you'd like. This could of course be the name of the location, the GPS coordinates or a nice personal greeting in case the model is a present. Create and position the Text Object First zoom out to get a better overview of your model. Press Shift + A and then T to add text to your collection. Note that the text might be very tiny compared to the imported model. Enter your text. Scale the text up to roughly match the size of your model. Try giving it a scale factor of 15 if you are not sure where to start. Now rotate the text object. Usually rotating it by these numbers X=0\u02da , Y=180\u02da and Z=90\u02da should bring the text into the correct orientation. But this of course depends on the orientation of your model. Move the text to your desired position - in this case into the middle of the bottom of the model. While X - and Y -locations are the relevant dimensions here, I recommend to also move the Z -Location to e.g. -1 . It will make it easy for us to distinguish the text object from the elevation model later. Tip If you are planning to also add magnet slots to your 3D model, you should ensure to leave enough room to the corners of the model. Solidify the Text Object Next we need to turn the text object into a mesh. This can be done by first changing from \"Edit Mode\" into \"Object Mode\". Then click Object \u2192 Convert \u2192 Mesh. Notice how the icon next to your text object changes and is now equal to the icon of your imported STL model (which also is a mesh representation). Next we will extrude the text to a 3D object. Click on the \"Modifier Properties\" tab. Click on \"Add Modifier\" and select \"Solidify\". Set the following parameters: Mode: Complex Thickness: 0.2 (This of course depends on the dimensions of your model. Just make sure to not punch holes through the model.) Offset: -1.0 Once configured, select \"Apply\" in the dropdown menu. Subtract the Text Object from the Map Now it's time to subtract the text object from the map. To do so, click on \"Add Modifier\" again and chose \"Boolean\". Chose the following options: Difference Object Text (This should be the name of your text object, in my case this is Text .) Again, once configured, select \"Apply\" from the dropdown menu. Now you successfully subtracted the text from the model. Before we are good to go though, you need to delete the text object, as it is still there and would also be exported alongside the map model. Finally verify the result looks as expected. Now that we successfully added text to the model, you are good to jump over to exporting the 3D model - or continue with further customizations in the upcoming section. Adding Magnet Slots Adding slots for little magnets in your model will allow you to easily mount the model to your fridge or some other magnetic surface. I found this a particularly helpful approach when trying to put your model into e.g. a picture frame. This way you don't have to deal with glue and you are still able to take the model out of the frame to have a closer look and inspect the text we've inserted at the bottom of it. Example use case for Magnet Slots Note The magnets will be added into the model during printing. Therefore we will add a pause into the G-code. This will be discussed in more detail in the preparation for 3D-printing section. Requirements Obviously you need some magnets to be inserted into the slots we are going to prepare. For this purpose I recommend little magnet discs with a diameter of 10mm and a height of 2mm. You should be able to find these relatively easy online. I used to buy them in a dedicated magnets online shop but figured they are available across many online platforms eventually. It is of course possible to use magnets with other dimensions. In this case you need to ensure to adjust the dimensions of the magnet slots respectively. When buying such disc magnets, it is important to note, that the magnetic north and south pole must be on top and bottom of the disc, as per the image. If this is not the case the magnetic force will likely be too low to hold your model tight against any other surface. Usually vendors of such magnets describe the strength of a neodymium magnet with the mentioned dimensions to be in the area of 1 - 1.3kg. Create and position a Cylinder If you don't have it open still, open up blender and import your STL file. In the top menu bar select the \"Modelling\" tab and click on Add \u2192 Mesh \u2192 Cylinder. Click anywhere on the screen to insert the cylinder mesh object. Next we will tweak the exact position of the cylinder. If you haven't changed the position of your model yet, choosing the following location and scale values will just work: X Y Z Location 7 7 1.5 Scale 5.15 5.15 1.1 Check the values in the info pane on the right for more details: Attention In case you are using magnets with different dimensions (as mentioned above) you need to ensure to adjust the values for location and scale accordingly. Note that X=5.15 specifies the radius of the disc and thus results in a slot with a diameter of 10.3mm. This means that we will have a buffer of 0.3mm in the x- and y-dimension and a buffer of 0.2mm for the z-dimension. Based on my experiences this will leave just enough room for the magnet to firmly snap into the slot. Please note though, that the specs of such a buffer might vary from printer to printer as they depend on your nozzle size and slicing parameters. If you now select the cylinder model, you should see its highlighted shape shining through in the corner of the map model as per the above image. Multiply the Cylinder To multiply the cylinder copy and paste it three times until you end up having four cylinder objects in your collection. Now adjust the position of the three new cylinders to move them into the remaining corners of your model. Based on the chosen size of your model the location values for cylinders can be determined by using the following approach: cylinder X Y Z 001 x-7 7 1.5 002 x-7 y-7 1.5 003 7 y-7 1.5 Where x is the length of your model in the x-dimension and y is the width in the y-dimension. After setting the correct location values for the remaining three cylinders, you should be able to do a quick visual check by selecting all four cylinders and looking at the model from the z-direction. The shape of cylinders should again shine through the map model and should be visible in the corners of the model just like this: Subtract the Cylinders from the Map Now that we have four cylinders in the correct position, we need to subtract them from the map model. This can be done using the boolean modifier. Select your map model from the top-right collection and click \"Add Modifier\" in the \"Modifier Properties\" tab. From the list of modifiers, select the \"Boolean\" modifier, just like we did in the subtracting the text object section. Again chose \"Difference\" as boolean operation and pick a cylinder as object to be used for subtraction. From the dropdown menu select and hit \"Apply\". Once the modifier was computed successfully, right-click the chosen cylinder in the collection and delete it. Repeat the previous steps three more times in order to subtract all cylinders from the map model. Once you are done with subtracting, toggle the \"X-Ray\" mode in the top-right corner. This will allow to again visually check the resulting magnet slots. Exporting the 3D Map After completing the customizations of the map model, we are ready to export the model. Select the model in the top-right collection and subsequently navigate to File \u2192 Export \u2192 Stl. Preparation for 3D-Printing This section will provide a few tips and tricks for slicing our 3D model. We will use PrusaSlicer as it offers a few powerful features which we will leverage. PrusaSlicer is both open-source and free. It can be downloaded from its GitHub Release page . Caution Printing a model this large will likely eat up a day or more in printing time. It is not a complex print per se, but it would be good if you already have some experience with large prints in order to reduce the risk of failed prints and frustration. In terms of 3d-printing resources I usually recommend: the all3dp basics and the prusa knowledge base . However, the web contains a tremendous amount of 3d-printing resources which cover all sorts of problems. Slicing During the slicing of the model we will make use of the variable layer height feature to reduce print time and insert a pause into the G-code in order to be able to insert the magnets into their slots. Using variable Layer Height The variable layer height feature allows to have different layer heights throughout the height of your model. This is particularly helpful for a topological map model like this as the first few layers do not need high precision at all. In most cases these are of rectangular shape with very little details. The only details in the first few layers are the text and the magnet slots, but their shape is constant along the z-axis, thus their outcome is independent of the configured layer height. Open up PrusaSlicer and simply drag and drop your customized STL file into it. First, I recommend to initially slice your model with the default settings (i.e. 0.2mm layer height) in order to get an impression of how long such a print will take. Slicing my model with a 0.2mm layer height and 10% infill would take roughly 11.5h. After the slicing computation has finished, we should scroll through all layers, to quickly inspect whether everything looks as expected. Have a closer look at the outcome of the text and the magnet slots! Consider the following items for verification: Check that the magnet slots do not overlap with the text or that there is enough space between. Check that there are sufficient layers above the magnet slots, such that the magnets do not shine though. Check that the orientation of the text is as expected. If everything looks good, go back to the \"3D editor view\" of the plater and click on the variable layer height feature in the top bar. Drag the slider in of the \"Quality / Speed\" option to the left most position and hit the Adaptive button next to it. The result should look similar to the following image. The algorithm will automatically detect the level of detail from one layer to the next one and set the layer height accordingly. If you hover over the individual layers in the layer stack column, you'll see that the first few layers will get a much coarser layer height (in my case ~0.25mm) compared to the remaining upper layer heights (~0.07mm). This particular use cases really leverages the potential of the variable layer height feature if you want to find the sweet spot between quality and speed. Note though, using variable layer height increases the print time to ~21h in my example. Tip Topological maps with coarse layer heights also look super interesting. I recommend trying out a smaller model with a layer height of e.g. 0.2mm or even 0.35mm. In this case there is no need to use the adaptive layer height. Inserting a Pause Inserting a pause is required to be able to insert the magnets during the print. We will insert the pause right before the slots will be closed with the upcoming layer. First we have to find the correct layer which closes the magnet slots. Consider the following two images. The first image shows layer 11, which is the last layer of the slot, before closing it. The second image shows layer 12 which is the first closing layer. Since PrusaSlicer will insert a configured pause always at the beginning of a layer, we need to select the first closing layer. Layer 12 in this case. Ensure you are on the first closing layer and right-click on the little orange plus sign next to the layer cursor. In the pop-up menu select \"Add pause print (M601)\" and enter a text message into the dialog. Notice the little pause symbol on the layer you inserted it, which is now visible in the layer stack column. All set! Now we are good to go with slicing and subsequently exporting of the G-code. Printing As mentioned above, printing a 3-dimensional map usually is not a complex print in itself. However, as it will take around one day, you should be prepared with enough time. And filament. Tip When it comes to filament, I highly recommend using rainbow filament \ud83c\udf08 as it will emphasize the altitude of your model. Rainbow filament definitely is my favorite choice for these kind of topological map prints. Colorful Print of Kilimanjaro Other than that, I played around a little with painting models. Turns out I'm not a very talented painter. Maybe you are! During the print process itself there is nothing special to be taken care of except inserting the magnets of course. In general it is recommended to ensure the magnetic orientation of the magnets to be the same. However, this is apparently not needed if you plan to put your model on the fridge only. Yet, I suggest to simply use a fifth magnet and verify the orientation of north and south pole of each magnet before putting it into the slots. Happy Printing! Don't feel like building it yourself? Like the look, but don't feel like completing all the above steps? Or just don't have the time? I'm here to help. I do already have quite some practice with generating, customizing, slicing and printing of topological maps. Check out my little shop and feel free to reach out in case of interest. Table Mountain in Cape Town Some examples of alternative tools for generating 3D elevation models are Terrain2ST , TouchTerrain and map2stl just to name a few. \u21a9","title":"How to easily generate and 3D-print topological Maps"},{"location":"posts/3d-print-topological-maps/#how-to-easily-generate-and-3d-print-topological-maps","text":"This guide will provide an overview of how to generate a 3D model of any place in the world for subsequent 3d-printing. It will show how to generate and download the STL file, but also how to customize and prepare it for printing. 3d-printed Mount Fuji in Japan Tldr Head over to the mapa streamlit app and generate a STL file which you can use for 3d-printing. If you are interested in more customizations, keep on reading. There are a bunch of tools out there 1 which allow for generating 3D models based on satellite elevation data (mostly referred to as DEM ). However, I found that all existing tools did either not have high resolution data or were not as flexible as I hoped them to be, which is why I built my own tool. Hence, this guide will demonstrate the usage of mapa .","title":"How to easily generate and 3D-print topological Maps"},{"location":"posts/3d-print-topological-maps/#generating-stl-files-using-the-mapa-streamlit-app","text":"mapa is a tool for converting GeoTIFF data into a tiles-based representation. The library is based on NumPy and Numba and provides a CLI API, a Python API, a Jupyter Notebook interface and the streamlit app which is built on top of mapa via the mapa-streamlit repository. In this guide we will focus on the usage of the mapa-streamlit web app, as it is the most convenient way. However, if you are curios I'd recommend to also check out the other options, as they provide even more flexibility. Screenshot of the mapa streamlit app Follow the below steps to generate a STL file of any selection on the map. Go to the mapa streamlit web app . Zoom in to your area of interest. Click the the black square on the left side of the map. Draw a rectangle. Hit the Create STL button. The app will now download the required data and compute the STL file in the background. Once finished, you can click the Download STL button. Unpack the downloaded zip file and inspect the computed STL file with your favorite STL file viewer. This is what an example could look like: Example of downloaded STL file","title":"Generating STL Files using the mapa Streamlit App"},{"location":"posts/3d-print-topological-maps/#customizations","text":"This section will outline how to: add text to the bottom of the model add slots for magnets into the model We will use blender to customize the 3D model. Blender is a very powerful and popular open-source 3D graphics software. Caution I strongly recommend using a version of blender >= 3.0.0 to avoid any issues when working with text. You can download blender here . Once you have blender installed, open it up and import your downloaded STL file via: File \u2192 Import \u2192 Stl.","title":"Customizations"},{"location":"posts/3d-print-topological-maps/#adding-text","text":"Adding some text to your model will allow you to persist any kind of information into the model you'd like. This could of course be the name of the location, the GPS coordinates or a nice personal greeting in case the model is a present.","title":"Adding Text"},{"location":"posts/3d-print-topological-maps/#create-and-position-the-text-object","text":"First zoom out to get a better overview of your model. Press Shift + A and then T to add text to your collection. Note that the text might be very tiny compared to the imported model. Enter your text. Scale the text up to roughly match the size of your model. Try giving it a scale factor of 15 if you are not sure where to start. Now rotate the text object. Usually rotating it by these numbers X=0\u02da , Y=180\u02da and Z=90\u02da should bring the text into the correct orientation. But this of course depends on the orientation of your model. Move the text to your desired position - in this case into the middle of the bottom of the model. While X - and Y -locations are the relevant dimensions here, I recommend to also move the Z -Location to e.g. -1 . It will make it easy for us to distinguish the text object from the elevation model later. Tip If you are planning to also add magnet slots to your 3D model, you should ensure to leave enough room to the corners of the model.","title":"Create and position the Text Object"},{"location":"posts/3d-print-topological-maps/#solidify-the-text-object","text":"Next we need to turn the text object into a mesh. This can be done by first changing from \"Edit Mode\" into \"Object Mode\". Then click Object \u2192 Convert \u2192 Mesh. Notice how the icon next to your text object changes and is now equal to the icon of your imported STL model (which also is a mesh representation). Next we will extrude the text to a 3D object. Click on the \"Modifier Properties\" tab. Click on \"Add Modifier\" and select \"Solidify\". Set the following parameters: Mode: Complex Thickness: 0.2 (This of course depends on the dimensions of your model. Just make sure to not punch holes through the model.) Offset: -1.0 Once configured, select \"Apply\" in the dropdown menu.","title":"Solidify the Text Object"},{"location":"posts/3d-print-topological-maps/#subtract-the-text-object-from-the-map","text":"Now it's time to subtract the text object from the map. To do so, click on \"Add Modifier\" again and chose \"Boolean\". Chose the following options: Difference Object Text (This should be the name of your text object, in my case this is Text .) Again, once configured, select \"Apply\" from the dropdown menu. Now you successfully subtracted the text from the model. Before we are good to go though, you need to delete the text object, as it is still there and would also be exported alongside the map model. Finally verify the result looks as expected. Now that we successfully added text to the model, you are good to jump over to exporting the 3D model - or continue with further customizations in the upcoming section.","title":"Subtract the Text Object from the Map"},{"location":"posts/3d-print-topological-maps/#adding-magnet-slots","text":"Adding slots for little magnets in your model will allow you to easily mount the model to your fridge or some other magnetic surface. I found this a particularly helpful approach when trying to put your model into e.g. a picture frame. This way you don't have to deal with glue and you are still able to take the model out of the frame to have a closer look and inspect the text we've inserted at the bottom of it. Example use case for Magnet Slots Note The magnets will be added into the model during printing. Therefore we will add a pause into the G-code. This will be discussed in more detail in the preparation for 3D-printing section.","title":"Adding Magnet Slots"},{"location":"posts/3d-print-topological-maps/#requirements","text":"Obviously you need some magnets to be inserted into the slots we are going to prepare. For this purpose I recommend little magnet discs with a diameter of 10mm and a height of 2mm. You should be able to find these relatively easy online. I used to buy them in a dedicated magnets online shop but figured they are available across many online platforms eventually. It is of course possible to use magnets with other dimensions. In this case you need to ensure to adjust the dimensions of the magnet slots respectively. When buying such disc magnets, it is important to note, that the magnetic north and south pole must be on top and bottom of the disc, as per the image. If this is not the case the magnetic force will likely be too low to hold your model tight against any other surface. Usually vendors of such magnets describe the strength of a neodymium magnet with the mentioned dimensions to be in the area of 1 - 1.3kg.","title":"Requirements"},{"location":"posts/3d-print-topological-maps/#create-and-position-a-cylinder","text":"If you don't have it open still, open up blender and import your STL file. In the top menu bar select the \"Modelling\" tab and click on Add \u2192 Mesh \u2192 Cylinder. Click anywhere on the screen to insert the cylinder mesh object. Next we will tweak the exact position of the cylinder. If you haven't changed the position of your model yet, choosing the following location and scale values will just work: X Y Z Location 7 7 1.5 Scale 5.15 5.15 1.1 Check the values in the info pane on the right for more details: Attention In case you are using magnets with different dimensions (as mentioned above) you need to ensure to adjust the values for location and scale accordingly. Note that X=5.15 specifies the radius of the disc and thus results in a slot with a diameter of 10.3mm. This means that we will have a buffer of 0.3mm in the x- and y-dimension and a buffer of 0.2mm for the z-dimension. Based on my experiences this will leave just enough room for the magnet to firmly snap into the slot. Please note though, that the specs of such a buffer might vary from printer to printer as they depend on your nozzle size and slicing parameters. If you now select the cylinder model, you should see its highlighted shape shining through in the corner of the map model as per the above image.","title":"Create and position a Cylinder"},{"location":"posts/3d-print-topological-maps/#multiply-the-cylinder","text":"To multiply the cylinder copy and paste it three times until you end up having four cylinder objects in your collection. Now adjust the position of the three new cylinders to move them into the remaining corners of your model. Based on the chosen size of your model the location values for cylinders can be determined by using the following approach: cylinder X Y Z 001 x-7 7 1.5 002 x-7 y-7 1.5 003 7 y-7 1.5 Where x is the length of your model in the x-dimension and y is the width in the y-dimension. After setting the correct location values for the remaining three cylinders, you should be able to do a quick visual check by selecting all four cylinders and looking at the model from the z-direction. The shape of cylinders should again shine through the map model and should be visible in the corners of the model just like this:","title":"Multiply the Cylinder"},{"location":"posts/3d-print-topological-maps/#subtract-the-cylinders-from-the-map","text":"Now that we have four cylinders in the correct position, we need to subtract them from the map model. This can be done using the boolean modifier. Select your map model from the top-right collection and click \"Add Modifier\" in the \"Modifier Properties\" tab. From the list of modifiers, select the \"Boolean\" modifier, just like we did in the subtracting the text object section. Again chose \"Difference\" as boolean operation and pick a cylinder as object to be used for subtraction. From the dropdown menu select and hit \"Apply\". Once the modifier was computed successfully, right-click the chosen cylinder in the collection and delete it. Repeat the previous steps three more times in order to subtract all cylinders from the map model. Once you are done with subtracting, toggle the \"X-Ray\" mode in the top-right corner. This will allow to again visually check the resulting magnet slots.","title":"Subtract the Cylinders from the Map"},{"location":"posts/3d-print-topological-maps/#exporting-the-3d-map","text":"After completing the customizations of the map model, we are ready to export the model. Select the model in the top-right collection and subsequently navigate to File \u2192 Export \u2192 Stl.","title":"Exporting the 3D Map"},{"location":"posts/3d-print-topological-maps/#preparation-for-3d-printing","text":"This section will provide a few tips and tricks for slicing our 3D model. We will use PrusaSlicer as it offers a few powerful features which we will leverage. PrusaSlicer is both open-source and free. It can be downloaded from its GitHub Release page . Caution Printing a model this large will likely eat up a day or more in printing time. It is not a complex print per se, but it would be good if you already have some experience with large prints in order to reduce the risk of failed prints and frustration. In terms of 3d-printing resources I usually recommend: the all3dp basics and the prusa knowledge base . However, the web contains a tremendous amount of 3d-printing resources which cover all sorts of problems.","title":"Preparation for 3D-Printing"},{"location":"posts/3d-print-topological-maps/#slicing","text":"During the slicing of the model we will make use of the variable layer height feature to reduce print time and insert a pause into the G-code in order to be able to insert the magnets into their slots.","title":"Slicing"},{"location":"posts/3d-print-topological-maps/#using-variable-layer-height","text":"The variable layer height feature allows to have different layer heights throughout the height of your model. This is particularly helpful for a topological map model like this as the first few layers do not need high precision at all. In most cases these are of rectangular shape with very little details. The only details in the first few layers are the text and the magnet slots, but their shape is constant along the z-axis, thus their outcome is independent of the configured layer height. Open up PrusaSlicer and simply drag and drop your customized STL file into it. First, I recommend to initially slice your model with the default settings (i.e. 0.2mm layer height) in order to get an impression of how long such a print will take. Slicing my model with a 0.2mm layer height and 10% infill would take roughly 11.5h. After the slicing computation has finished, we should scroll through all layers, to quickly inspect whether everything looks as expected. Have a closer look at the outcome of the text and the magnet slots! Consider the following items for verification: Check that the magnet slots do not overlap with the text or that there is enough space between. Check that there are sufficient layers above the magnet slots, such that the magnets do not shine though. Check that the orientation of the text is as expected. If everything looks good, go back to the \"3D editor view\" of the plater and click on the variable layer height feature in the top bar. Drag the slider in of the \"Quality / Speed\" option to the left most position and hit the Adaptive button next to it. The result should look similar to the following image. The algorithm will automatically detect the level of detail from one layer to the next one and set the layer height accordingly. If you hover over the individual layers in the layer stack column, you'll see that the first few layers will get a much coarser layer height (in my case ~0.25mm) compared to the remaining upper layer heights (~0.07mm). This particular use cases really leverages the potential of the variable layer height feature if you want to find the sweet spot between quality and speed. Note though, using variable layer height increases the print time to ~21h in my example. Tip Topological maps with coarse layer heights also look super interesting. I recommend trying out a smaller model with a layer height of e.g. 0.2mm or even 0.35mm. In this case there is no need to use the adaptive layer height.","title":"Using variable Layer Height"},{"location":"posts/3d-print-topological-maps/#inserting-a-pause","text":"Inserting a pause is required to be able to insert the magnets during the print. We will insert the pause right before the slots will be closed with the upcoming layer. First we have to find the correct layer which closes the magnet slots. Consider the following two images. The first image shows layer 11, which is the last layer of the slot, before closing it. The second image shows layer 12 which is the first closing layer. Since PrusaSlicer will insert a configured pause always at the beginning of a layer, we need to select the first closing layer. Layer 12 in this case. Ensure you are on the first closing layer and right-click on the little orange plus sign next to the layer cursor. In the pop-up menu select \"Add pause print (M601)\" and enter a text message into the dialog. Notice the little pause symbol on the layer you inserted it, which is now visible in the layer stack column. All set! Now we are good to go with slicing and subsequently exporting of the G-code.","title":"Inserting a Pause"},{"location":"posts/3d-print-topological-maps/#printing","text":"As mentioned above, printing a 3-dimensional map usually is not a complex print in itself. However, as it will take around one day, you should be prepared with enough time. And filament. Tip When it comes to filament, I highly recommend using rainbow filament \ud83c\udf08 as it will emphasize the altitude of your model. Rainbow filament definitely is my favorite choice for these kind of topological map prints. Colorful Print of Kilimanjaro Other than that, I played around a little with painting models. Turns out I'm not a very talented painter. Maybe you are! During the print process itself there is nothing special to be taken care of except inserting the magnets of course. In general it is recommended to ensure the magnetic orientation of the magnets to be the same. However, this is apparently not needed if you plan to put your model on the fridge only. Yet, I suggest to simply use a fifth magnet and verify the orientation of north and south pole of each magnet before putting it into the slots. Happy Printing!","title":"Printing"},{"location":"posts/3d-print-topological-maps/#dont-feel-like-building-it-yourself","text":"Like the look, but don't feel like completing all the above steps? Or just don't have the time? I'm here to help. I do already have quite some practice with generating, customizing, slicing and printing of topological maps. Check out my little shop and feel free to reach out in case of interest. Table Mountain in Cape Town Some examples of alternative tools for generating 3D elevation models are Terrain2ST , TouchTerrain and map2stl just to name a few. \u21a9","title":"Don't feel like building it yourself?"},{"location":"posts/auto-sync-zeit-epub-to-your-tolino/","tags":["Python","Windows Server 2008","BackBlaze B2"],"text":"Migrating 100TB of Prod Data from Windows Server 2008 to Microsoft Azure with Backblaze B2 CLI As businesses increasingly embrace cloud solutions, the need to migrate large volumes of production data from on-premises servers to cloud platforms becomes a critical task. This blog post will talk about the problems that came up when moving over 100TB of data from a physical server running Windows Server 2008 to Microsoft Azure, and how the Backblaze B2 CLI emerged as the only reliable and cost-effective solution when working with Windows Server 2008. The Initial Struggle: Attempting to use traditional methods such as robocopy and copy to transfer the massive dataset led to frustrating roadblocks. Hours into the transfer process, these methods would result in random RAM errors, throwing obscure error codes that hindered progress. Because of this, I had to look for another way to handle the amount of data the business needed to move without these problems. Discovering Backblaze B2 CLI: During the exploration for a robust migration tool, I recalled my prior positive experience with Backblaze B2. Having previously utilized B2 for its simplicity and reliability, it stood out as a preferred choice. Surprisingly, many mainstream file transfer services lacked support for Windows Server 2008, including Azure, Amazon S3, and other storage providers, whose Windows binaries were incompatible with the aging server. It was only when I stumbled upon the Backblaze B2 CLI's GitHub page that I recognized a potential pathway to make it work on Server 2008. This unexpected finding made me want to learn more, and that's when I saw Backblaze B2's hidden but promising potential to help me deal with the unique problems that the migration brought up. Python 3.8 Requirement and Thonny: To use Backblaze B2 CLI, Python 3.8 was a prerequisite. Luckily, i remembered that one of my favourite Python IDE's, Thonny, provided a simple download link to the last supported version of Python for Windows 7. (Server 2008 and windows 7 share the same architecture, so i knew it would be installable in server 2008 and i was correct). Thonny Website Thonny Shell: One of the quality of life features about Thonny is the Thonny terminal. After opening the apllication, heading to tools -> Open system Shell provides access to a command-line shell within the Thonny environment. When you open the system shell in Thonny, it inherits the environment variables and configurations set by Thonny, including the paths to the Python interpreter and pip. This ensures that you can directly run Python commands and use pip to install packages without having to manually configure the environment. Simply typing: pip intall b2 backblaze b2 cli is able to be installed on your windows server 2008 machine. Configure and Use B2 Cli: This guide i followed to set up my b2 cli and copy the files. It is a very simple process. B2 to Azure Migration: Now that the data has been successfully migrated into B2 cloud, we can power off the 2008 machine. To migrate data seamlessly from a Backblaze B2 bucket to Azure Blob Storage, using the AzCopy tool proves to be an efficient solution. Given that B2 is built upon the S3 protocol, compatibility with AzCopy, which supports both S3 and Azure Blob Storage, facilitates a smooth transition. Begin by configuring AzCopy with the necessary credentials for both the source B2 bucket and the destination Azure Blob Storage account. This involves obtaining the appropriate access keys or other authentication details. Once configured, employ AzCopy's copy command to initiate the migration, specifying the source B2 bucket URL and the destination Azure Blob Storage URL. AzCopy efficiently handles the transfer of files, ensuring that data integrity is maintained throughout the process. With its straightforward command-line interface and robust capabilities, AzCopy streamlines the migration from Backblaze B2 to Azure Blob Storage, offering a reliable and efficient solution for cloud data transfer. azcopy copy \"https://B2BucketName/Path\" \"https://AzureStorageAccountName.blob.core.windows.net/ContainerName/Path\" --recursive --from-to=BlobLocal Why B2 CLI Succeeded: One notable reason for the success of Backblaze B2 CLI was its avoidance of the Windows API for copying. The Windows API, known for its instability during large-scale data transfers, had been a source of frustration with earlier methods. B2 CLI, using its own robust mechanisms, proved to be a stable alternative that ensured the integrity of the data throughout the migration. Conclusion: The migration of large datasets can be a daunting task, especially when faced with the limitations of legacy systems. The experience outlined here highlights the importance of choosing tools that are not only scalable but also adaptable to the unique challenges posed by the migration process. In this case, Backblaze B2 CLI emerged as a reliable solution, showcasing the value of open-source tools and the need for flexibility in the face of complex migration scenarios.","title":"Auto sync zeit epub to your tolino"},{"location":"posts/auto-sync-zeit-epub-to-your-tolino/#migrating-100tb-of-prod-data-from-windows-server-2008-to-microsoft-azure-with-backblaze-b2-cli","text":"As businesses increasingly embrace cloud solutions, the need to migrate large volumes of production data from on-premises servers to cloud platforms becomes a critical task. This blog post will talk about the problems that came up when moving over 100TB of data from a physical server running Windows Server 2008 to Microsoft Azure, and how the Backblaze B2 CLI emerged as the only reliable and cost-effective solution when working with Windows Server 2008.","title":"Migrating 100TB of Prod Data from Windows Server 2008 to Microsoft Azure with Backblaze B2 CLI"},{"location":"posts/auto-sync-zeit-epub-to-your-tolino/#the-initial-struggle","text":"Attempting to use traditional methods such as robocopy and copy to transfer the massive dataset led to frustrating roadblocks. Hours into the transfer process, these methods would result in random RAM errors, throwing obscure error codes that hindered progress. Because of this, I had to look for another way to handle the amount of data the business needed to move without these problems.","title":"The Initial Struggle:"},{"location":"posts/auto-sync-zeit-epub-to-your-tolino/#discovering-backblaze-b2-cli","text":"During the exploration for a robust migration tool, I recalled my prior positive experience with Backblaze B2. Having previously utilized B2 for its simplicity and reliability, it stood out as a preferred choice. Surprisingly, many mainstream file transfer services lacked support for Windows Server 2008, including Azure, Amazon S3, and other storage providers, whose Windows binaries were incompatible with the aging server. It was only when I stumbled upon the Backblaze B2 CLI's GitHub page that I recognized a potential pathway to make it work on Server 2008. This unexpected finding made me want to learn more, and that's when I saw Backblaze B2's hidden but promising potential to help me deal with the unique problems that the migration brought up.","title":"Discovering Backblaze B2 CLI:"},{"location":"posts/auto-sync-zeit-epub-to-your-tolino/#python-38-requirement-and-thonny","text":"To use Backblaze B2 CLI, Python 3.8 was a prerequisite. Luckily, i remembered that one of my favourite Python IDE's, Thonny, provided a simple download link to the last supported version of Python for Windows 7. (Server 2008 and windows 7 share the same architecture, so i knew it would be installable in server 2008 and i was correct). Thonny Website","title":"Python 3.8 Requirement and Thonny:"},{"location":"posts/auto-sync-zeit-epub-to-your-tolino/#thonny-shell","text":"One of the quality of life features about Thonny is the Thonny terminal. After opening the apllication, heading to tools -> Open system Shell provides access to a command-line shell within the Thonny environment. When you open the system shell in Thonny, it inherits the environment variables and configurations set by Thonny, including the paths to the Python interpreter and pip. This ensures that you can directly run Python commands and use pip to install packages without having to manually configure the environment. Simply typing: pip intall b2 backblaze b2 cli is able to be installed on your windows server 2008 machine.","title":"Thonny Shell:"},{"location":"posts/auto-sync-zeit-epub-to-your-tolino/#configure-and-use-b2-cli","text":"This guide i followed to set up my b2 cli and copy the files. It is a very simple process.","title":"Configure and Use B2 Cli:"},{"location":"posts/auto-sync-zeit-epub-to-your-tolino/#b2-to-azure-migration","text":"Now that the data has been successfully migrated into B2 cloud, we can power off the 2008 machine. To migrate data seamlessly from a Backblaze B2 bucket to Azure Blob Storage, using the AzCopy tool proves to be an efficient solution. Given that B2 is built upon the S3 protocol, compatibility with AzCopy, which supports both S3 and Azure Blob Storage, facilitates a smooth transition. Begin by configuring AzCopy with the necessary credentials for both the source B2 bucket and the destination Azure Blob Storage account. This involves obtaining the appropriate access keys or other authentication details. Once configured, employ AzCopy's copy command to initiate the migration, specifying the source B2 bucket URL and the destination Azure Blob Storage URL. AzCopy efficiently handles the transfer of files, ensuring that data integrity is maintained throughout the process. With its straightforward command-line interface and robust capabilities, AzCopy streamlines the migration from Backblaze B2 to Azure Blob Storage, offering a reliable and efficient solution for cloud data transfer. azcopy copy \"https://B2BucketName/Path\" \"https://AzureStorageAccountName.blob.core.windows.net/ContainerName/Path\" --recursive --from-to=BlobLocal","title":"B2 to Azure Migration:"},{"location":"posts/auto-sync-zeit-epub-to-your-tolino/#why-b2-cli-succeeded","text":"One notable reason for the success of Backblaze B2 CLI was its avoidance of the Windows API for copying. The Windows API, known for its instability during large-scale data transfers, had been a source of frustration with earlier methods. B2 CLI, using its own robust mechanisms, proved to be a stable alternative that ensured the integrity of the data throughout the migration.","title":"Why B2 CLI Succeeded:"},{"location":"posts/auto-sync-zeit-epub-to-your-tolino/#conclusion","text":"The migration of large datasets can be a daunting task, especially when faced with the limitations of legacy systems. The experience outlined here highlights the importance of choosing tools that are not only scalable but also adaptable to the unique challenges posed by the migration process. In this case, Backblaze B2 CLI emerged as a reliable solution, showcasing the value of open-source tools and the need for flexibility in the face of complex migration scenarios.","title":"Conclusion:"},{"location":"posts/github-pages-with-namecheap-domain/","tags":["dns","github pages","guide","namecheap"],"text":"How to Use a Custom Namecheap Domain with GitHub Pages? This post will guide you through the different steps needed to configure a custom Namecheap domain with your static website hosted on GitHub Pages. Note This guide focuses on Namecheap as a domain name provider. The overall approach is likely similar to other domain name providers, however, the steps outlined below are specific to Namecheap and cannot be applied to other domain name providers directly. Motivation Sometimes you want your GitHub Page to be reachable via a custom domain to provide a catchy name or to put it next to your existing website by using a subdomain. Note, that there are a bunch of resources on this topic out there already, but it seemed like none of them puts all the required pieces into a single place, thus I came up with this guide. Example Consider the following example: The GitHub repo of this blog is located at github.com/fgebhart/blog and the default domain for its corresponding GitHub Page would be fgebhart.github.io/blog . Now as you can see, I obtained the domain fgebhart.dev from Namecheap and used the subdomain blog.fgebhart.dev as the custom domain for this blog. Guide Let's configure a custom domain for your GitHub Page. Attention This guide assumes the following prerequisites to be fulfilled: You have a GitHub repository set up and its corresponding static GitHub Page is published at the default domain name (i.e. <user>.github.io/<repo> ) You bought a domain on Namecheap and can configure it via the Namecheap Dashboard Namecheap Configuration Head over to your Namecheap Dashboard and hit the MANAGE button: On the Domains \u2192 Details page click the Advanced DNS tab: In the Host Records section, you need to add five entries. Four of them are of type A Record with Host being @ pointing to the GitHub Pages IP addresses. The fifth record will be the actual CNAME Record pointing to your default GitHub Page domain. The below screenshot shows the values needed to map your new custom domain ( blog.fgebhart.dev in this case) to the default GitHub Pages domain ( fgebhart.github.io/blog ) as given in the above example . Copy the values from this table and configure your host records accordingly. Type Host Value TTL A Record @ 185.199.108.153 Automatic A Record @ 185.199.109.153 Automatic A Record @ 185.199.110.153 Automatic A Record @ 185.199.111.153 Automatic CNAME Record blog fgebhart.github.io Automatic Hint Both subdomains and apex domains are supported with GitHub Pages. If you prefer to use the apex domain instead of the subdomain you have to enter www instead of blog in the Host column since www is just a usual subdomain from DNS perspective. It usually takes a while until this configuration becomes active. After waiting for one hour verify your DNS settings to be active by running the following command (replace blog.fgebhart.dev with your domain of course): dig +noall +answer +nocmd blog.fgebhart.dev Your output should look similar to this one: blog.fgebhart.dev. 1799 IN CNAME fgebhart.github.io. fgebhart.github.io. 3600 IN A 185.199.110.153 fgebhart.github.io. 3600 IN A 185.199.111.153 fgebhart.github.io. 3600 IN A 185.199.108.153 fgebhart.github.io. 3600 IN A 185.199.109.153 If you get the expected output, your Namecheap configuration is in place and we can proceed with the configuration of GitHub. GitHub Pages Configuration Go to your GitHub repository and navigate to the GitHub Pages settings. For this blog the URL is https://github.com/fgebhart/blog/settings/pages . Given the above-mentioned prerequisites, your static website should already be deployed to GitHub Pages and accessible via the default github.io URL (if you still need to set up the deployment, I'd suggest having a look at the GitHub Actions Workflow of this blog , check out the GitHub docs on publishing your website or reading the docs of mkdocs-material regarding publishing ). Scroll down to the Custom Domain section and enter your custom domain into the input field. In the case of this blog blog.fgebhart.dev was entered: Hint Again, if you prefer to use your apex domain , simply omit the subdomain and enter e.g. fgebhart.dev here. In case your Namecheap configuration was successful as described above, the GitHub DNS check should pass and you should be able to hit the Save button. It is also strongly recommended to enable HTTPS for your custom domain by checking the Enforce HTTPS box. After a moment your static website should be accessible via your new domain. \ud83d\udc19 Troubleshooting My Website is not Accessible via the Custom Domain Patience. Updating and propagating new DNS records can take quite some time. This makes iterating a tedious task, but using the above-mentioned dig command helps verify that things are set up as intended. Each Commit to my Repo seems to break the configured Domain Routing In case a push/commit to your repo containing the source code of your static website seems to break the DNS configuration, you might need to add a CNAME file to your repo. Usually, configuring the custom domain on the GitHub Pages settings tab will add a CNAME file to the branch from which your static page will be deployed. However, a GitHub Action could be implemented in such a way, that it would overwrite the CNAME file with every commit. If this is the case, you would need to add the file manually to your repo. To do so, have a look at the deploy branch of your repo (usually gh-pages ) to conclude which folder of your source code branch will be deployed from the deploy branch. In the root of this folder, you have to add a file called CNAME (all uppercase). The content of the file must contain a single line only, which is the custom URL to point to your GitHub Page. In the case of this blog, here is the CNAME file which contains blog.fgebhart.dev . For more details have a look at the GitHub Troubleshooting docs . External Links GitHub docs on managing custom domains with GitHub Pages (Visited 2022-09-18) Namecheap Knowledgebase on linking your domain to GitHub Pages (Visited 2022-09-18) Namecheap guide on the different DNS types (Visited 2022-09-19)","title":"How to Use a Custom Namecheap Domain with GitHub Pages?"},{"location":"posts/github-pages-with-namecheap-domain/#how-to-use-a-custom-namecheap-domain-with-github-pages","text":"This post will guide you through the different steps needed to configure a custom Namecheap domain with your static website hosted on GitHub Pages. Note This guide focuses on Namecheap as a domain name provider. The overall approach is likely similar to other domain name providers, however, the steps outlined below are specific to Namecheap and cannot be applied to other domain name providers directly.","title":"How to Use a Custom Namecheap Domain with GitHub Pages?"},{"location":"posts/github-pages-with-namecheap-domain/#motivation","text":"Sometimes you want your GitHub Page to be reachable via a custom domain to provide a catchy name or to put it next to your existing website by using a subdomain. Note, that there are a bunch of resources on this topic out there already, but it seemed like none of them puts all the required pieces into a single place, thus I came up with this guide.","title":"Motivation"},{"location":"posts/github-pages-with-namecheap-domain/#example","text":"Consider the following example: The GitHub repo of this blog is located at github.com/fgebhart/blog and the default domain for its corresponding GitHub Page would be fgebhart.github.io/blog . Now as you can see, I obtained the domain fgebhart.dev from Namecheap and used the subdomain blog.fgebhart.dev as the custom domain for this blog.","title":"Example"},{"location":"posts/github-pages-with-namecheap-domain/#guide","text":"Let's configure a custom domain for your GitHub Page. Attention This guide assumes the following prerequisites to be fulfilled: You have a GitHub repository set up and its corresponding static GitHub Page is published at the default domain name (i.e. <user>.github.io/<repo> ) You bought a domain on Namecheap and can configure it via the Namecheap Dashboard","title":"Guide"},{"location":"posts/github-pages-with-namecheap-domain/#namecheap-configuration","text":"Head over to your Namecheap Dashboard and hit the MANAGE button: On the Domains \u2192 Details page click the Advanced DNS tab: In the Host Records section, you need to add five entries. Four of them are of type A Record with Host being @ pointing to the GitHub Pages IP addresses. The fifth record will be the actual CNAME Record pointing to your default GitHub Page domain. The below screenshot shows the values needed to map your new custom domain ( blog.fgebhart.dev in this case) to the default GitHub Pages domain ( fgebhart.github.io/blog ) as given in the above example . Copy the values from this table and configure your host records accordingly. Type Host Value TTL A Record @ 185.199.108.153 Automatic A Record @ 185.199.109.153 Automatic A Record @ 185.199.110.153 Automatic A Record @ 185.199.111.153 Automatic CNAME Record blog fgebhart.github.io Automatic Hint Both subdomains and apex domains are supported with GitHub Pages. If you prefer to use the apex domain instead of the subdomain you have to enter www instead of blog in the Host column since www is just a usual subdomain from DNS perspective. It usually takes a while until this configuration becomes active. After waiting for one hour verify your DNS settings to be active by running the following command (replace blog.fgebhart.dev with your domain of course): dig +noall +answer +nocmd blog.fgebhart.dev Your output should look similar to this one: blog.fgebhart.dev. 1799 IN CNAME fgebhart.github.io. fgebhart.github.io. 3600 IN A 185.199.110.153 fgebhart.github.io. 3600 IN A 185.199.111.153 fgebhart.github.io. 3600 IN A 185.199.108.153 fgebhart.github.io. 3600 IN A 185.199.109.153 If you get the expected output, your Namecheap configuration is in place and we can proceed with the configuration of GitHub.","title":"Namecheap Configuration"},{"location":"posts/github-pages-with-namecheap-domain/#github-pages-configuration","text":"Go to your GitHub repository and navigate to the GitHub Pages settings. For this blog the URL is https://github.com/fgebhart/blog/settings/pages . Given the above-mentioned prerequisites, your static website should already be deployed to GitHub Pages and accessible via the default github.io URL (if you still need to set up the deployment, I'd suggest having a look at the GitHub Actions Workflow of this blog , check out the GitHub docs on publishing your website or reading the docs of mkdocs-material regarding publishing ). Scroll down to the Custom Domain section and enter your custom domain into the input field. In the case of this blog blog.fgebhart.dev was entered: Hint Again, if you prefer to use your apex domain , simply omit the subdomain and enter e.g. fgebhart.dev here. In case your Namecheap configuration was successful as described above, the GitHub DNS check should pass and you should be able to hit the Save button. It is also strongly recommended to enable HTTPS for your custom domain by checking the Enforce HTTPS box. After a moment your static website should be accessible via your new domain. \ud83d\udc19","title":"GitHub Pages Configuration"},{"location":"posts/github-pages-with-namecheap-domain/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"posts/github-pages-with-namecheap-domain/#my-website-is-not-accessible-via-the-custom-domain","text":"Patience. Updating and propagating new DNS records can take quite some time. This makes iterating a tedious task, but using the above-mentioned dig command helps verify that things are set up as intended.","title":"My Website is not Accessible via the Custom Domain"},{"location":"posts/github-pages-with-namecheap-domain/#each-commit-to-my-repo-seems-to-break-the-configured-domain-routing","text":"In case a push/commit to your repo containing the source code of your static website seems to break the DNS configuration, you might need to add a CNAME file to your repo. Usually, configuring the custom domain on the GitHub Pages settings tab will add a CNAME file to the branch from which your static page will be deployed. However, a GitHub Action could be implemented in such a way, that it would overwrite the CNAME file with every commit. If this is the case, you would need to add the file manually to your repo. To do so, have a look at the deploy branch of your repo (usually gh-pages ) to conclude which folder of your source code branch will be deployed from the deploy branch. In the root of this folder, you have to add a file called CNAME (all uppercase). The content of the file must contain a single line only, which is the custom URL to point to your GitHub Page. In the case of this blog, here is the CNAME file which contains blog.fgebhart.dev . For more details have a look at the GitHub Troubleshooting docs .","title":"Each Commit to my Repo seems to break the configured Domain Routing"},{"location":"posts/github-pages-with-namecheap-domain/#external-links","text":"GitHub docs on managing custom domains with GitHub Pages (Visited 2022-09-18) Namecheap Knowledgebase on linking your domain to GitHub Pages (Visited 2022-09-18) Namecheap guide on the different DNS types (Visited 2022-09-19)","title":"External Links"},{"location":"tags/","text":"Tags This page lists all available tags and the given blog posts. 3d-printing How to easily generate and 3D-print topological Maps BackBlaze B2 Auto sync zeit epub to your tolino Python Auto sync zeit epub to your tolino Windows Server 2008 Auto sync zeit epub to your tolino blender How to easily generate and 3D-print topological Maps dns How to Use a Custom Namecheap Domain with GitHub Pages? gis How to easily generate and 3D-print topological Maps github pages How to Use a Custom Namecheap Domain with GitHub Pages? guide How to easily generate and 3D-print topological Maps How to Use a Custom Namecheap Domain with GitHub Pages? mapa How to easily generate and 3D-print topological Maps namecheap How to Use a Custom Namecheap Domain with GitHub Pages? slicing How to easily generate and 3D-print topological Maps","title":"Tags"},{"location":"tags/#tags","text":"This page lists all available tags and the given blog posts.","title":"Tags"},{"location":"tags/#3d-printing","text":"How to easily generate and 3D-print topological Maps","title":"3d-printing"},{"location":"tags/#backblaze-b2","text":"Auto sync zeit epub to your tolino","title":"BackBlaze B2"},{"location":"tags/#python","text":"Auto sync zeit epub to your tolino","title":"Python"},{"location":"tags/#windows-server-2008","text":"Auto sync zeit epub to your tolino","title":"Windows Server 2008"},{"location":"tags/#blender","text":"How to easily generate and 3D-print topological Maps","title":"blender"},{"location":"tags/#dns","text":"How to Use a Custom Namecheap Domain with GitHub Pages?","title":"dns"},{"location":"tags/#gis","text":"How to easily generate and 3D-print topological Maps","title":"gis"},{"location":"tags/#github-pages","text":"How to Use a Custom Namecheap Domain with GitHub Pages?","title":"github pages"},{"location":"tags/#guide","text":"How to easily generate and 3D-print topological Maps How to Use a Custom Namecheap Domain with GitHub Pages?","title":"guide"},{"location":"tags/#mapa","text":"How to easily generate and 3D-print topological Maps","title":"mapa"},{"location":"tags/#namecheap","text":"How to Use a Custom Namecheap Domain with GitHub Pages?","title":"namecheap"},{"location":"tags/#slicing","text":"How to easily generate and 3D-print topological Maps","title":"slicing"}]}